---
import type { CollectionEntry } from 'astro:content';

import { Image } from 'astro:assets';

import Prose from '~/components/Prose.astro';
import { getThumbhash } from '~/lib/images';

import FormattedDate from '../components/FormattedDate.astro';
import BaseLayout from './BaseLayout.astro';

type Props = CollectionEntry<'blog'>['data'];

const { categories = [], coverAlt, coverImage, date, title } = Astro.props;
const hash = coverImage ? await getThumbhash(coverImage) : '';
---

<BaseLayout
	itemref="cover-image author"
	itemtype="http://schema.org/BlogPosting"
>
	{
		coverImage && (
			<figure
				class="fixed top-0 left-0 right-0 -z-10 max-h-screen overflow-hidden flex justify-center"
				id="cover-image"
				itemprop="associatedMedia"
				itemscope
				itemtype="https://schema.org/ImageObject"
				slot="end"
			>
				<Image
					alt={coverAlt ?? ''}
					class="image-filter object-cover object-center w-screen min-w-80 bg-cover text-transparent"
					data-hash={hash}
					itemprop="contentUrl"
					src={coverImage}
				/>
				{coverAlt && <meta content={coverAlt} itemprop="description" />}
			</figure>
		)
	}
	<Prose
		aria-labelledby="post-title"
		as="article"
		class:list={[
			'bg-black p-10 rounded-md mb-10',
			coverImage && 'mt-[20vh]',
		]}
		itemprop="articleBody"
	>
		<h1 class="mb-0" id="post-title" itemprop="name">{title}</h1>
		<p class="italic font-light text-base mb-10">
			<FormattedDate date={date} />
			{
				categories.length > 0 && (
					<span aria-label="Categories">
						&ndash; Filed under:&nbsp;
						{categories.map((category, index) => (
							<>
								<span
									itemprop="keywords"
									itemscope
									itemtype="http://schema.org/DefinedTerm"
								>
									<a
										href={`/category/${category}`}
										itemprop="url"
									>
										<span itemprop="name">{category}</span>
									</a>
								</span>
								{index < categories.length - 1 && ', '}
							</>
						))}
					</span>
				)
			}
		</p>
		<slot />
	</Prose>
</BaseLayout>
<script>
	import { thumbHashToDataURL } from 'thumbhash';

	function blurryImage() {
		const image = document.getElementById('cover-image');
		if (!(image instanceof HTMLImageElement)) {
			return;
		}
		const hash = image.dataset.hash;
		if (!hash) {
			return;
		}

		const thumbHash = Uint8Array.from(window.atob(hash), (v) =>
			v.charCodeAt(0),
		);
		const dataUrl = thumbHashToDataURL(thumbHash);
		image.style.backgroundImage = `url(${dataUrl})`;
	}
	blurryImage();
</script>
